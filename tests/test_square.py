import unittest
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import square


class SquareTestCase(unittest.TestCase):

    def test_area_positive_side(self):
        """
        Тестирует вычисление площади квадрата с положительной стороной.

        Проверяет корректность работы функции area() с обычными положительными значениями.
        Площадь квадрата должна равняться квадрату длины стороны.

        Тестируемая функция:
            square.area(a) - вычисляет площадь квадрата

        Входные данные:
            a = 5

        Ожидаемый результат:
            5² = 25

        Пример выполнения:
            >>> square.area(5)
            25
        """
        result = square.area(5)
        self.assertEqual(result, 25)

    def test_area_zero_side(self):
        """
        Тестирует вычисление площади квадрата с нулевой стороной.

        Проверяет обработку граничного случая, когда сторона равна нулю.
        Площадь должна равняться нулю.

        Тестируемая функция:
            square.area(a) - вычисляет площадь квадрата

        Входные данные:
            a = 0

        Ожидаемый результат:
            0

        Пример выполнения:
            >>> square.area(0)
            0
        """
        result = square.area(0)
        self.assertEqual(result, 0)

    def test_area_unit_side(self):
        """
        Тестирует вычисление площади квадрата с единичной стороной.

        Проверяет работу функции со стороной равной 1.
        Площадь единичного квадрата должна равняться 1.

        Тестируемая функция:
            square.area(a) - вычисляет площадь квадрата

        Входные данные:
            a = 1

        Ожидаемый результат:
            1² = 1

        Пример выполнения:
            >>> square.area(1)
            1
        """
        result = square.area(1)
        self.assertEqual(result, 1)

    def test_area_decimal_side(self):
        """
        Тестирует вычисление площади квадрата с десятичной стороной.

        Проверяет корректность работы функции с числами с плавающей точкой.
        Тестирует точность вычислений для нецелых значений.

        Тестируемая функция:
            square.area(a) - вычисляет площадь квадрата

        Входные данные:
            a = 2.5

        Ожидаемый результат:
            2.5² = 6.25

        Пример выполнения:
            >>> square.area(2.5)
            6.25
        """
        result = square.area(2.5)
        self.assertEqual(result, 6.25)

    def test_perimeter_positive_side(self):
        """
        Тестирует вычисление периметра квадрата с положительной стороной.

        Проверяет корректность работы функции perimeter() с положительными значениями.
        Периметр квадрата должен равняться произведению стороны на 4.

        Тестируемая функция:
            square.perimeter(a) - вычисляет периметр квадрата

        Входные данные:
            a = 5

        Ожидаемый результат:
            4 * 5 = 20

        Пример выполнения:
            >>> square.perimeter(5)
            20
        """
        result = square.perimeter(5)
        self.assertEqual(result, 20)

    def test_perimeter_zero_side(self):
        """
        Тестирует вычисление периметра квадрата с нулевой стороной.

        Проверяет обработку граничного случая, когда сторона равна нулю.
        Периметр должен равняться нулю.

        Тестируемая функция:
            square.perimeter(a) - вычисляет периметр квадрата

        Входные данные:
            a = 0

        Ожидаемый результат:
            0

        Пример выполнения:
            >>> square.perimeter(0)
            0
        """
        result = square.perimeter(0)
        self.assertEqual(result, 0)

    def test_perimeter_unit_side(self):
        """
        Тестирует вычисление периметра квадрата с единичной стороной.

        Проверяет работу функции со стороной равной 1.
        Периметр единичного квадрата должен равняться 4.

        Тестируемая функция:
            square.perimeter(a) - вычисляет периметр квадрата

        Входные данные:
            a = 1

        Ожидаемый результат:
            4 * 1 = 4

        Пример выполнения:
            >>> square.perimeter(1)
            4
        """
        result = square.perimeter(1)
        self.assertEqual(result, 4)

    def test_perimeter_decimal_side(self):
        """
        Тестирует вычисление периметра квадрата с десятичной стороной.

        Проверяет корректность работы функции с числами с плавающей точкой.
        Тестирует точность вычислений для нецелых значений.

        Тестируемая функция:
            square.perimeter(a) - вычисляет периметр квадрата

        Входные данные:
            a = 2.5

        Ожидаемый результат:
            4 * 2.5 = 10.0

        Пример выполнения:
            >>> square.perimeter(2.5)
            10.0
        """
        result = square.perimeter(2.5)
        self.assertEqual(result, 10.0)


if __name__ == '__main__':
    unittest.main()