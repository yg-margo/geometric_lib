import unittest
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import rectangle


class RectangleTestCase(unittest.TestCase):

    def test_area_positive_sides(self):
        """
        Тестирует вычисление площади прямоугольника с положительными сторонами.

        Проверяет корректность работы функции area() с обычными положительными значениями.
        Площадь должна равняться произведению длины на ширину.

        Тестируемая функция:
            rectangle.area(a, b) - вычисляет площадь прямоугольника

        Входные данные:
            a = 5, b = 3

        Ожидаемый результат:
            5 * 3 = 15

        Пример выполнения:
            >>> rectangle.area(5, 3)
            15
        """
        result = rectangle.area(5, 3)
        self.assertEqual(result, 15)

    def test_area_zero_side(self):
        """
        Тестирует вычисление площади прямоугольника с одной нулевой стороной.

        Проверяет обработку граничного случая, когда одна из сторон равна нулю.
        Площадь должна равняться нулю независимо от значения другой стороны.

        Тестируемая функция:
            rectangle.area(a, b) - вычисляет площадь прямоугольника

        Входные данные:
            a = 10, b = 0

        Ожидаемый результат:
            10 * 0 = 0

        Пример выполнения:
            >>> rectangle.area(10, 0)
            0
        """
        result = rectangle.area(10, 0)
        self.assertEqual(result, 0)

    def test_area_unit_sides(self):
        """
        Тестирует вычисление площади прямоугольника с единичными сторонами.

        Проверяет работу функции когда обе стороны равны 1.
        Площадь единичного квадрата должна равняться 1.

        Тестируемая функция:
            rectangle.area(a, b) - вычисляет площадь прямоугольника

        Входные данные:
            a = 1, b = 1

        Ожидаемый результат:
            1 * 1 = 1

        Пример выполнения:
            >>> rectangle.area(1, 1)
            1
        """
        result = rectangle.area(1, 1)
        self.assertEqual(result, 1)

    def test_area_decimal_sides(self):
        """
        Тестирует вычисление площади прямоугольника с десятичными сторонами.

        Проверяет корректность работы функции с числами с плавающей точкой.
        Тестирует точность вычислений для нецелых значений.

        Тестируемая функция:
            rectangle.area(a, b) - вычисляет площадь прямоугольника

        Входные данные:
            a = 2.5, b = 4.2

        Ожидаемый результат:
            2.5 * 4.2 = 10.5

        Пример выполнения:
            >>> rectangle.area(2.5, 4.2)
            10.5
        """
        result = rectangle.area(2.5, 4.2)
        self.assertEqual(result, 10.5)

    def test_perimeter_positive_sides(self):
        """
        Тестирует вычисление периметра прямоугольника с положительными сторонами.

        Проверяет корректность работы функции perimeter() с положительными значениями.
        Периметр должен равняться удвоенной сумме сторон.

        Тестируемая функция:
            rectangle.perimeter(a, b) - вычисляет периметр прямоугольника

        Входные данные:
            a = 5, b = 3

        Ожидаемый результат:
            2 * (5 + 3) = 16

        Пример выполнения:
            >>> rectangle.perimeter(5, 3)
            16
        """
        result = rectangle.perimeter(5, 3)
        self.assertEqual(result, 16)

    def test_perimeter_zero_sides(self):
        """
        Тестирует вычисление периметра прямоугольника с нулевыми сторонами.

        Проверяет обработку граничного случая, когда обе стороны равны нулю.
        Периметр должен равняться нулю.

        Тестируемая функция:
            rectangle.perimeter(a, b) - вычисляет периметр прямоугольника

        Входные данные:
            a = 0, b = 0

        Ожидаемый результат:
            2 * (0 + 0) = 0

        Пример выполнения:
            >>> rectangle.perimeter(0, 0)
            0
        """
        result = rectangle.perimeter(0, 0)
        self.assertEqual(result, 0)

    def test_perimeter_unit_sides(self):
        """
        Тестирует вычисление периметра прямоугольника с единичными сторонами.

        Проверяет работу функции когда обе стороны равны 1.
        Периметр единичного квадрата должен равняться 4.

        Тестируемая функция:
            rectangle.perimeter(a, b) - вычисляет периметр прямоугольника

        Входные данные:
            a = 1, b = 1

        Ожидаемый результат:
            2 * (1 + 1) = 4

        Пример выполнения:
            >>> rectangle.perimeter(1, 1)
            4
        """
        result = rectangle.perimeter(1, 1)
        self.assertEqual(result, 4)

    def test_perimeter_decimal_sides(self):
        """
        Тестирует вычисление периметра прямоугольника с десятичными сторонами.

        Проверяет корректность работы функции с числами с плавающей точкой.
        Тестирует точность вычислений для нецелых значений.

        Тестируемая функция:
            rectangle.perimeter(a, b) - вычисляет периметр прямоугольника

        Входные данные:
            a = 2.5, b = 3.5

        Ожидаемый результат:
            2 * (2.5 + 3.5) = 12.0

        Пример выполнения:
            >>> rectangle.perimeter(2.5, 3.5)
            12.0
        """
        result = rectangle.perimeter(2.5, 3.5)
        self.assertEqual(result, 12.0)


if __name__ == '__main__':
    unittest.main()