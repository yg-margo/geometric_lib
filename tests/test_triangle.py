import unittest
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import triangle


class TriangleTestCase(unittest.TestCase):

    def test_area_positive_values(self):
        """
        Тестирует вычисление площади треугольника с положительными значениями.

        Проверяет корректность работы функции area() с обычными положительными значениями.
        Площадь должна равняться половине произведения основания на высоту.

        Тестируемая функция:
            triangle.area(a, h) - вычисляет площадь треугольника

        Входные данные:
            a = 6, h = 4

        Ожидаемый результат:
            (6 * 4) / 2 = 12.0

        Пример выполнения:
            >>> triangle.area(6, 4)
            12.0
        """
        result = triangle.area(6, 4)
        self.assertEqual(result, 12.0)

    def test_area_zero_base(self):
        """
        Тестирует вычисление площади треугольника с нулевым основанием.

        Проверяет обработку граничного случая, когда основание равно нулю.
        Площадь должна равняться нулю независимо от значения высоты.

        Тестируемая функция:
            triangle.area(a, h) - вычисляет площадь треугольника

        Входные данные:
            a = 0, h = 5

        Ожидаемый результат:
            (0 * 5) / 2 = 0

        Пример выполнения:
            >>> triangle.area(0, 5)
            0
        """
        result = triangle.area(0, 5)
        self.assertEqual(result, 0)

    def test_area_zero_height(self):
        """
        Тестирует вычисление площади треугольника с нулевой высотой.

        Проверяет обработку граничного случая, когда высота равна нулю.
        Площадь должна равняться нулю независимо от значения основания.

        Тестируемая функция:
            triangle.area(a, h) - вычисляет площадь треугольника

        Входные данные:
            a = 5, h = 0

        Ожидаемый результат:
            (5 * 0) / 2 = 0

        Пример выполнения:
            >>> triangle.area(5, 0)
            0
        """
        result = triangle.area(5, 0)
        self.assertEqual(result, 0)

    def test_area_unit_values(self):
        """
        Тестирует вычисление площади треугольника с единичными значениями.

        Проверяет работу функции когда основание и высота равны 1.
        Площадь должна равняться 0.5.

        Тестируемая функция:
            triangle.area(a, h) - вычисляет площадь треугольника

        Входные данные:
            a = 1, h = 1

        Ожидаемый результат:
            (1 * 1) / 2 = 0.5

        Пример выполнения:
            >>> triangle.area(1, 1)
            0.5
        """
        result = triangle.area(1, 1)
        self.assertEqual(result, 0.5)

    def test_area_decimal_values(self):
        """
        Тестирует вычисление площади треугольника с десятичными значениями.

        Проверяет корректность работы функции с числами с плавающей точкой.
        Тестирует точность вычислений для нецелых значений.

        Тестируемая функция:
            triangle.area(a, h) - вычисляет площадь треугольника

        Входные данные:
            a = 3.5, h = 2.4

        Ожидаемый результат:
            (3.5 * 2.4) / 2 = 4.2

        Пример выполнения:
            >>> triangle.area(3.5, 2.4)
            4.2
        """
        result = triangle.area(3.5, 2.4)
        self.assertEqual(result, 4.2)

    def test_perimeter_positive_sides(self):
        """
        Тестирует вычисление периметра треугольника с положительными сторонами.

        Проверяет корректность работы функции perimeter() с положительными значениями.
        Периметр должен равняться сумме всех трех сторон.

        Тестируемая функция:
            triangle.perimeter(a, b, c) - вычисляет периметр треугольника

        Входные данные:
            a = 3, b = 4, c = 5

        Ожидаемый результат:
            3 + 4 + 5 = 12

        Пример выполнения:
            >>> triangle.perimeter(3, 4, 5)
            12
        """
        result = triangle.perimeter(3, 4, 5)
        self.assertEqual(result, 12)

    def test_perimeter_zero_side(self):
        """
        Тестирует вычисление периметра треугольника с одной нулевой стороной.

        Проверяет обработку случая, когда одна из сторон равна нулю.
        Периметр должен равняться сумме ненулевых сторон.

        Тестируемая функция:
            triangle.perimeter(a, b, c) - вычисляет периметр треугольника

        Входные данные:
            a = 0, b = 4, c = 5

        Ожидаемый результат:
            0 + 4 + 5 = 9

        Пример выполнения:
            >>> triangle.perimeter(0, 4, 5)
            9
        """
        result = triangle.perimeter(0, 4, 5)
        self.assertEqual(result, 9)

    def test_perimeter_unit_sides(self):
        """
        Тестирует вычисление периметра треугольника с единичными сторонами.

        Проверяет работу функции когда все стороны равны 1.
        Периметр равностороннего единичного треугольника должен равняться 3.

        Тестируемая функция:
            triangle.perimeter(a, b, c) - вычисляет периметр треугольника

        Входные данные:
            a = 1, b = 1, c = 1

        Ожидаемый результат:
            1 + 1 + 1 = 3

        Пример выполнения:
            >>> triangle.perimeter(1, 1, 1)
            3
        """
        result = triangle.perimeter(1, 1, 1)
        self.assertEqual(result, 3)

    def test_perimeter_decimal_sides(self):
        """
        Тестирует вычисление периметра треугольника с десятичными сторонами.

        Проверяет корректность работы функции с числами с плавающей точкой.
        Тестирует точность вычислений для нецелых значений.

        Тестируемая функция:
            triangle.perimeter(a, b, c) - вычисляет периметр треугольника

        Входные данные:
            a = 2.5, b = 3.2, c = 4.1

        Ожидаемый результат:
            2.5 + 3.2 + 4.1 = 9.8

        Пример выполнения:
            >>> triangle.perimeter(2.5, 3.2, 4.1)
            9.8
        """
        result = triangle.perimeter(2.5, 3.2, 4.1)
        self.assertEqual(result, 9.8)


if __name__ == '__main__':
    unittest.main()