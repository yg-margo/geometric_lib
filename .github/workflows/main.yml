
name: CI/CD Pipeline for Geometric Library

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install unittest-xml-reporting coverage
        
        # Create requirements.txt if it doesn't exist
        if [ ! -f requirements.txt ]; then
          echo "# Geometric Library Dependencies" > requirements.txt
          echo "# Add your project dependencies here" >> requirements.txt
        fi
        
        # Install dependencies from requirements.txt
        python -m pip install -r requirements.txt
      shell: bash
      if: runner.os != 'Windows'

    - name: Install dependencies (Windows)
      run: |
        python -m pip install --upgrade pip
        pip install unittest-xml-reporting coverage
        
        # Create requirements.txt if it doesn't exist
        if (!(Test-Path requirements.txt)) {
          "# Geometric Library Dependencies" | Out-File -FilePath requirements.txt -Encoding UTF8
          "# Add your project dependencies here" | Add-Content -Path requirements.txt -Encoding UTF8
        }
        
        # Install dependencies from requirements.txt
        python -m pip install -r requirements.txt
      shell: pwsh
      if: runner.os == 'Windows'

    - name: Run unit tests with coverage
      run: |
        coverage run -m unittest discover tests -v
        coverage report --show-missing
        coverage xml
      shell: bash

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Check test results
      run: |
        python -m unittest discover tests -v --buffer
      shell: bash

    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
      shell: bash

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Build package
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/

  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run code formatting check
      run: |
        black --check . || echo "Code formatting issues found"

    - name: Run import sorting check
      run: |
        isort --check-only . || echo "Import sorting issues found"

    - name: Run linting
      run: |
        flake8 . --max-line-length=88 --extend-ignore=E203,W503 || echo "Linting issues found"

    - name: Run type checking
      run: |
        mypy . --ignore-missing-imports || echo "Type checking issues found"

